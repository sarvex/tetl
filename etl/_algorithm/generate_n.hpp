// Copyright (c) Tobias Hienzsch. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.

#ifndef TETL_ALGORITHM_GENERATE_N_HPP
#define TETL_ALGORITHM_GENERATE_N_HPP

namespace etl {

/// \brief Assigns values, generated by given function object `g`, to the first
/// count elements in the range beginning at `first`, if `count > 0`. Does
/// nothing otherwise.
///
/// \param first The range of elements to generate.
/// \param count Number of the elements to generate.
/// \param g Generator function object that will be called.
///
/// https://en.cppreference.com/w/cpp/algorithm/generate_n
///
/// \module Algorithm
template <typename OutputIt, typename SizeT, typename Generator>
constexpr auto generate_n(OutputIt first, SizeT count, Generator g) -> OutputIt
{
    for (; count > 0; ++first, --count) { *first = g(); }
    return first;
}

} // namespace etl

#endif // TETL_ALGORITHM_GENERATE_N_HPP